# -*- coding: utf-8 -*-
"""Pandas_Practice.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E2Tlvc4y-x6ycSwqgVef6ikjDEYppKzA

📊 CIS 9660 – Pandas Class Exercise

<small>📘 Topics Covered:</small>  
<small>1️⃣ Importing libraries</small>  
<small>2️⃣ Creating a DataFrame from a dictionary</small>  
<small>3️⃣ Viewing the first and last rows of the DataFrame</small>  
<small>4️⃣ Checking the number of rows and columns</small>  
<small>5️⃣ Sorting data by column values (ascending & descending)</small>  
<small>6️⃣ Sorting by index (axis=0 & axis=1)</small>  
<small>7️⃣ Slicing the DataFrame</small>  
<small>8️⃣ Creating and displaying a list of fruits</small>  
<small>9️⃣ Filtering data using boolean masks</small>  
<small>🔁 Reversing filters using the tilde <code>~</code> operator</small>  
<small>🔢 Generating basic plots using pandas</small>  
<small>➕ Adding two DataFrames and resetting index</small>  
<small>🛠️ Modifying the index (temporary & permanent)</small>  
<small>🔍 Accessing data using <code>loc[]</code> and <code>iloc[]</code></small>  
<small>♻️ Resetting the index to default</small>  
<small>🎯 Filtering with multiple conditions (e.g., major, age, CGPA)</small>  
<small>🔗 Merging DataFrames (left & right join, SQL-style)</small>
"""

# 📚 Importing Required Libraries
import pandas as pd                      # For data manipulation and analysis
from tabulate import tabulate            # For nicely formatted table display (optional)
import matplotlib.pyplot as plt          # For data visualization (if needed)

# 🧱 Creating a Pandas DataFrame from a Dictionary

roster = {
    'Name': ['Alice', 'Bob', 'Cathy', 'Dan', 'Eva', 'Frank', 'Grace', 'Hank','Ivy', 'Jack', 'Karen', 'Leo', 'Mona', 'Nate', 'Olivia', 'Paul',
        'Quinn', 'Rose', 'Steve', 'Tina'],
    'Major': ['Finance', 'Accounting', 'Biology', 'Engineering', 'Art','History', 'Physics', 'Math', 'Chemistry', 'Psychology',
              'Marketing', 'CS', 'Philosophy', 'Sociology', 'Music', 'Law','Economics', 'Geology', 'English', 'Stats'],
    'CGPA': [3.8, 3.5, 3.6, 3.9, 3.3, 3.4, 3.7, 3.1, 3.2, 3.85,3.6, 3.95, 3.0, 3.45, 3.75, 3.88, 3.55, 3.35, 3.25, 3.5],
    'Age': [22, 21, 23, 24, 32, 25, 26, 23, 51, 24,22, 37, 30, 25, 23, 24, 16, 22, 21, 23],
    'Gender': ['F', 'M', 'F', 'M', 'F', 'M', 'F', 'M', 'F', 'M','F', 'M', 'F', 'M', 'F', 'M', 'F', 'F', 'M', 'F'],
    'Graduated': ['Yes', 'Yes', 'No', 'Yes', 'No', 'Yes', 'No', 'No', 'No', 'Yes','Yes', 'Yes', 'Yes', 'Yes', 'Yes',
                  'No', 'No', 'Yes', 'No', 'No'],
    'Credits': [120, 115, 130, 140, 110, 100, 135, 125, 118, 122,119, 138, 105, 127, 131, 133, 121, 117, 116, 129],
    'Country': ['USA', 'Canada', 'USA', 'India', 'UK', 'USA', 'Germany', 'USA', 'India', 'Canada','UK', 'USA', 'Germany',
                'USA', 'India', 'Canada', 'UK', 'USA', 'USA', 'India']
        }
# 🔄 Converting Dictionary to Pandas DataFrame
roster_df_1 = pd.DataFrame(roster)
print(tabulate(roster_df_1, headers='keys', tablefmt='grid'))

# 🔍 Checking the Shape of the DataFrame, column and row
print()
print(f'Number of column and rows')
print('='*50)
print(f"The number of rows and column are {roster_df_1.shape}")
print(f'Which represents 20 rows and 8 column')

"""👀 Viewing the First Rows of the DataFrame

<small>1️⃣ Default view – displays the first 5 rows</small>  
<small>2️⃣ Display only the first 2 rows</small>
"""

print(roster_df_1.head()) # as default it will select first 5 rows
print('='*50)
print(roster_df_1.head(2)) # head(n) returns first "n" rows from the data set

"""🔽 Selecting the Last Rows of the DataFrame

<small>1️⃣ Default – displays the last 5 rows</small>  
<small>2️⃣ Display only the last 2 rows</small>
"""

print(roster_df_1.tail()) # as default it will select last 5 rows
print('='*50)
print(roster_df_1.tail(2)) # head(n) returns first "n" rows from the data set

"""🔢 Sorting the Data by Column Values

<small>1️⃣ Sort by a column in ascending order (default)</small>  
<small>2️⃣ Sort by a column in descending order</small>
"""

# sorting the cloumn Age as ascending order
print(roster_df_1.sort_values(by = 'Age'))
print('=' * 75)
# sorting the cloumn Age as ascending order
print(roster_df_1.sort_values(by = 'Age', ascending=False))

"""🗂️ Sorting the DataFrame by Index

<small>1️⃣ With <code>axis=0</code>, the row index is sorted in descending order.</small>  
<small>2️⃣ With <code>axis=1</code>, the columns are sorted alphabetically — useful for large datasets to view structure at a glance.</small>
"""

print(roster_df_1.sort_index(axis = 0, ascending=False))
print('='*75)
print(roster_df_1.sort_index(axis = 1, ascending=True))

"""<small>✂️ Slicing the DataFrame</small>  """

# List
fruit = ['Mango', 'Strawberry', 'Blueberry', 'Watermelon', 'Kiwi','Papaya', 'Peach', 'Cherry', 'Lemon', 'Coconut']

print(fruit[2:5]) # ['Blueberry', 'Watermelon', 'Kiwi'],start from 2 and ends with 4.
print(fruit[4:]) # ['Kiwi','Papaya', 'Peach', 'Cherry', 'Lemon', 'Coconut'],start from 4 and to the end.
print(fruit[:5]) # ['Mango', 'Strawberry', 'Blueberry', 'Watermelon', 'Kiwi'],start from 0 and ends on 4. Slicing start from left.
print(fruit[-2:-6]) # [],start from -2 ('Lemon') and stop before -6 ('Kiwi'). But Slicing start from left, so [].
print(fruit[-2:-3]) # [],start from -2 ('Lemon') and stop before -3 ('Cherry'). But Slicing start from left, so [].
print(fruit[-8:-4]) # ['Blueberry','Watermelon', 'Kiwi','Papaya'] Start from -8 ('Blueberry')c, stop before -4 ('Peach').
print(fruit[:-4]) # ['Mango', 'Strawberry', 'Blueberry', 'Watermelon', 'Kiwi','Papaya']

"""✂️ Slicing the DataFrame

<small>Use slicing to select a specific range of rows or columns from the DataFrame.</small>  
<small>Syntax: <code>df[start:stop]</code> — returns rows from index <code>start</code> to <code>stop </code>.</small>
"""

print(roster_df_1[2:5])
print('='*75)
print(roster_df_1[4:])
print('='*75)
print(roster_df_1[:5])
print('='*75)
print(roster_df_1[-2:-6])
print('='*75)
print(roster_df_1[-2:-3])
print('='*75)
print(roster_df_1[-8:-4])
print('='*75)
print(roster_df_1[:-4])

"""🔎 Filtering Values from the DataFrame Using a Mask

<small>1️⃣ Filter by <code>CGPA</code></small>  
<small>2️⃣ Filter by <code>Age</code></small>  
<small>3️⃣ Filter by <code>Country</code></small>  
<small>4️⃣ Combine multiple filters in one command using filter mask</small>
"""

# Define filter masks with meaningful names
high_cgpa_mask = roster_df_1['CGPA'] > 3.85
age_above_35_mask = roster_df_1['Age'] > 35
country_usa_mask = roster_df_1['Country'] == 'USA'
filter_mask = high_cgpa_mask & age_above_35_mask & country_usa_mask

# Apply filters and print results with clear section titles
print("🎓 Students with CGPA > 3.85")
print(roster_df_1[high_cgpa_mask])
print("=" * 75)

print("🧓 Students with Age > 35")
print(roster_df_1[age_above_35_mask])
print("=" * 75)

print("🌎 Students from the USA")
print(roster_df_1[country_usa_mask])
print("=" * 75)

print("🌎 Students from the USA, 🧓age over 35 and 🎓higher CGPA")
print(roster_df_1[filter_mask]) # Same thing can be done with df.loc[filter_mask]

"""<small>🔁 Using Tilde <code>(~)</code> for Reverse Filtering</small>  """

print("🌎 Students not 🎓higher CGPA")
print(roster_df_1[~high_cgpa_mask]) # ~ (tilde) do the opposite

"""📊 Generating Charts Using Pandas

<small>1️⃣ Scatter plot DataFrame columns</small>
"""

# library matplotlib.pyplot as plt imported

roster_df_1.plot(x = 'CGPA', y = 'Age', kind ='scatter')
plt.title ('CGPA Vs Age')
plt.show()

NewDf = roster_df_1.drop(columns=['Name', 'Major','Gender','Graduated','Country'])
print(NewDf.corr())

# Creating new DataFrame

roster_df_2 = {
    'Name': ['Zara', 'Liam', 'Noah', 'Mia', 'Aria', 'Ethan'],
    'Major': ['Robotics', 'Finance', 'Finance', 'Finance', 'Finance', 'Marine Biology'],
    'CGPA': [3.92, 3.75, 3.30, 3.88, 3.65, 3.45],
    'Age': [23, 24, 27, 22, 21, 28],
    'Gender': ['F', 'M', 'M', 'F', 'F', 'M'],
    'Graduated': ['Yes', 'No', 'Yes', 'No', 'Yes', 'No'],
    'Credits': [128, 119, 110, 123, 132, 108],
    'Country': ['USA', 'Canada', 'Germany', 'USA', 'UK', 'India']
}
roster_df_2 = pd.DataFrame(roster_df_2)
roster_df_2

# Adding Two DataFrames and fixing the index
Combine_df_1 = pd.concat([roster_df_1, roster_df_2], ignore_index= True)
print(Combine_df_1)

Combine_df_1_horizontal= pd.concat([roster_df_1, roster_df_2], axis = 1)
print(Combine_df_1_horizontal)

Combine_df_1.info()

"""🛠️ Modifying the Index of the DataFrame

<small>1️⃣ Modify the index <strong>temporarily</strong> by assigning a new index directly to a copy or during display.</small>  
<small>2️⃣ Modify the index <strong>permanently</strong> using <code>df.set_index()</code> with <code>inplace=True</code>.</small>
"""

print(Combine_df_1.set_index('Country'))
print('='*75)
print(Combine_df_1.set_index('Country', inplace=True))

Combine_df_1

"""🔍 Using <code>.loc[]</code> to Access Data by Index"""

Combine_df_1.loc['Canada']

Combine_df_1.loc['Canada', 'CGPA']

"""<small>♻️ Resetting the Index of a DataFrame</small>  """

Combine_df_1.reset_index(inplace=True)
print(Combine_df_1)

"""🎯 Filtering Students by Multiple Conditions
<small>Select all students who:</small>  
<small>• Have a <strong>finance</strong> major</small>  
<small>• Are older than <strong>20</strong></small>  
<small>• Have a <strong>CGPA</strong> below <strong>3.7</strong></small>

"""

Lower_CGPA = Combine_df_1['CGPA'] < 3.7
Age_30_above =  Combine_df_1['Age'] > 20
Finance_major= Combine_df_1['Major'] == 'Finance'
FilterMask = Lower_CGPA & Age_30_above & Finance_major

print(Combine_df_1[FilterMask])

"""🔢 Using <code>.iloc[]</code> to Access Rows by Position

<small>1️⃣ Works similarly to slicing in Python lists — e.g., <code>
"""

Combine_df_1.iloc[0:5]

"""🔗 Merging Two DataFrames (Like SQL Joins)

<small>1️⃣ <strong>Left Merge</strong> – returns all records from the left DataFrame and matching ones from the right.</small>

<small>2️⃣ <strong>Right Merge</strong> – returns all records from the right DataFrame and matching ones from the left.</small>
"""

# Creating two new dataframe with pandas

# dataframe one as dictionary
New_roster = {"emplid": [3421, 4723, 1331, 5435, 9453, 2345, 6234, 6845, 6245, 9645],
          "Name" : ["Bob", "Alice", "Joe", "Mike", "Lisa", "Alan", "Eli", "Mark", "Liz", "Jane"],
          "Major": ["Accounting", "Finance", "Chemistry", "Art", "Engineering", "Biology", "Physics", "History", "Art", "Engineering"],
          "GPA": [3.5, 3.8, 3.2, 3.7, 4.0, 3.5, 3.8, 3.2, 3.1, 3.0],
          "Age": [22, 23, 31, 40, 25, 22, 33, 31, 27, 55]
          }
# convert the dictionary into pandas
roster1_df = pd.DataFrame(New_roster)

# dataframe one as dictionary
address = {"emplid": [3421, 1331, 5435, 2345, 6845, 7425, 4045, 8245],
          "Address" : ["1 Hyland Blvd", "88 Parkside Ave", "848 Jersey Turnpike", "3 Main Street", "231 Water Street", "22 1st Ave", "4 Grand Concourse", "222 William Street"],
          "City": ["Staten Island", "Brooklyn", "Hoboken", "Queens", "New Haven", "Manhattan", "Bronx", "Hempstead"],
          "State": ["NY", "NY", "NJ", "NY", "CT", "NY", "NY", "NY"],
          "Zipcode": [10304, 11220, 70086, 11432, 60511, 10024, 10458, 24231]
          }
# convert the dictionary into pandas
address_df = pd.DataFrame(address)

# Merging (Left) two data frames
results = pd.merge(roster1_df, address_df, how='left', on = ['emplid'])
results

# Merging (right) two data frames
results_2 = pd.merge(roster1_df, address_df, how='right', on = ['emplid'])
results_2

